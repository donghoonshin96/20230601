package controller;

import java.io.File;
import java.io.IOException;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.tomcat.util.http.fileupload.disk.DiskFileItemFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import domain.BoardVO;
import domain.PagingVO;
import handler.PagingHandler;
import service.BoardService;
import service.BoardServiceImpl;

@WebServlet("/brd/*")
public class BoardController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger log = LoggerFactory.getLogger(BoardController.class);
	private RequestDispatcher rdp;
	private String destPage;
	private int isOk;
	private BoardService bsv;
	private String savePath;
	private final String UTF8 = "utf-8";

	public BoardController() {
		bsv = new BoardServiceImpl();
	}

	protected void service(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		response.setContentType("text/html; charset=utf-8");

		String uri = request.getRequestURI();
		log.info(">>> uri > " + uri);
		String path = uri.substring(uri.lastIndexOf("/") + 1);
		log.info(">>> path > " + path);

		switch (path) {
		case "register":
			log.debug(">>> " + path);
			destPage = "/board/register.jsp";
			break;

		case "insert":
			try {
				savePath = getServletContext().getRealPath("/_fileUpload");
				log.info(">>> 파일 저장 경로 : " + savePath);
				File fileDir = new File(savePath);
				
				DiskFileItemFactory fileItemFactory = new DiskFileItemFactory();
				fileItemFactory.setRepository(fileDir);
				fileItemFactory.setSizeThreshold(2*1024*1024);
				
				BoardVO bvo = new BoardVO();
				ServletFileUpload fileUpload = new ServletFileUpload(fileItemFactory);
			} catch (Exception e) {
				// TODO: handle exception
			}
			String title = request.getParameter("title");
			String writer = request.getParameter("writer");
			String content = request.getParameter("content");

			BoardVO bvo = new BoardVO(title, writer, content);
			isOk = bsv.register(bvo);
			log.info(">>> Insert > " + (isOk > 0 ? "success" : "fail"));
			destPage = "/";
			break;
		case "modify":
			int bno = Integer.parseInt(request.getParameter("bno"));
			BoardVO board = bsv.getBoard(bno);
			request.setAttribute("board", board);
			destPage = "/board/modify.jsp";
			break;

		case "update":
			int updatedBno = Integer.parseInt(request.getParameter("bno"));
			String updatedTitle = request.getParameter("title");
			String updatedContent = request.getParameter("content");

			BoardVO updatedBoard = new BoardVO();
			updatedBoard.setBno(updatedBno);
			updatedBoard.setTitle(updatedTitle);
			updatedBoard.setContent(updatedContent);

			int updateResult = bsv.updateBoard(updatedBoard);
			log.info(">>> Update > " + (updateResult > 0 ? "success" : "fail"));
			destPage = "list";
			break;

		case "delete":
			int deletedBno = Integer.parseInt(request.getParameter("bno"));

			int deleteResult = bsv.deleteBoard(deletedBno);
			log.info(">>> Delete > " + (deleteResult > 0 ? "success" : "fail"));
			destPage = "list";
			break;

		case "list":
			List<BoardVO> boardList = bsv.getBoardList();
			request.setAttribute("boardList", boardList);

			destPage = "/board/list.jsp";
			break;

		case "page":
			try {
				int pageNo = 1;
				int qty = 10;
				String type = "";
				String keyword = "";
				if (request.getParameter("type") != null) {
					type = request.getParameter("type");
					keyword = request.getParameter("keyword");
					log.info(">>> type > " + type + ">>> keyword > " + keyword);
				}
				if (request.getParameter("pageNo") != null) {
					pageNo = Integer.parseInt(request.getParameter("pageNo"));
					qty = Integer.parseInt(request.getParameter("qty"));
				}
				PagingVO pgvo = new PagingVO(pageNo, qty);
				pgvo.setType(type);
				pgvo.setKeyword(keyword);
				log.info(">>> pgvo > " + pgvo);
				int totCount = bsv.getTotal(pgvo);
				log.info("전체페이지 개수 : " + totCount);

				List<BoardVO> list = bsv.getPageList(pgvo);
				log.info(">>> list : " + list.size());
				PagingHandler ph = new PagingHandler(pgvo, totCount);

				request.setAttribute("pgh", ph);
				request.setAttribute("boardList", list);
				log.info("pageList 성공");
				destPage = "/board/list.jsp";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;

		case "detail":
			int detailBno = Integer.parseInt(request.getParameter("bno"));
			BoardVO detailBoard = bsv.getBoard(detailBno);
			request.setAttribute("post", detailBoard); // 속성 이름을 "post"로 수정
			destPage = "/board/detail.jsp";
			break;

		default:
			destPage = "/";
			break;

		}
		rdp = request.getRequestDispatcher(destPage);
		rdp.forward(request, response);

	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		service(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		service(request, response);
	}

}
